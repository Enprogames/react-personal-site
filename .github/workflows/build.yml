name: build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check_outdated_dependencies:
    name: Dependencies Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js 24.7.0 (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: 24.7.0
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies (npm ci)
        run: npm ci --no-audit --no-fund
      - name: Report outdated dependencies to summary
        continue-on-error: true
        run: |
          set -e
          OUT=$(npm outdated --json 2>/dev/null || true)
          OUT=$(npm outdated --json 2>/dev/null || true)
          echo "${OUT:-{}}" > outdated.json
          node -e "
            const fs=require('fs');
            const path=process.env.GITHUB_STEP_SUMMARY;
            const raw=(fs.readFileSync('outdated.json','utf8')||'{}').trim();
            const start=raw.indexOf('{');
            const end=raw.lastIndexOf('}');
            let o={};
            try { o = (start>=0 && end>=start) ? JSON.parse(raw.slice(start,end+1)) : {}; } catch { o = {}; }
            if (!Object.keys(o).length) {
              console.log('All dependencies up to date.');
              fs.appendFileSync(path, 'All dependencies up to date.\\n');
              process.exit(0);
            }
            const rows = Object.entries(o).map(([n,v]) => `| ${n} | ${v.current} | ${v.wanted} | ${v.latest} | ${v.type||''} |`).join('\\n');
            const md = `### Outdated dependencies\\n| Package | Current | Wanted | Latest | Type |\\n|---|---:|---:|---:|---|\\n${rows}\\n`;
            console.log(md);
            fs.appendFileSync(path, md);
            for (const [n,v] of Object.entries(o)) {
              console.log(`::warning title=Outdated dependency::${n} ${v.current} â†’ wanted ${v.wanted}, latest ${v.latest}`);
            }
          "
      - name: Update PR comment: outdated dependencies
        if: github.event_name == 'pull_request'
        continue-on-error: true
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const raw = (fs.readFileSync('outdated.json','utf8')||'').trim();
            // Extract valid JSON object defensively
            const start = raw.indexOf('{');
            const end = raw.lastIndexOf('}');
            if (start < 0 || end < start) return;
            let o = {};
            try { o = JSON.parse(raw.slice(start, end+1)); } catch { o = {}; }
            const raw = (fs.readFileSync('outdated.json','utf8')||'').trim();
            // Extract valid JSON object defensively
            const start = raw.indexOf('{');
            const end = raw.lastIndexOf('}');
            if (start < 0 || end < start) return;
            let o = {};
            try { o = JSON.parse(raw.slice(start, end+1)); } catch { o = {}; }
            if (!Object.keys(o).length) return;
            const rows = Object.entries(o).map(([n,v]) => `| ${n} | ${v.current} | ${v.wanted} | ${v.latest} | ${v.type||''} |`).join('\n');
            const md = `### Outdated dependencies\n| Package | Current | Wanted | Latest | Type |\n|---|---:|---:|---:|---|\n${rows}\n`;
            const {owner, repo, number} = context.issue;
            const existing = await github.rest.issues.listComments({owner, repo, issue_number: number});
            const prev = existing.data.find(c => c.user?.type === 'Bot' && c.body?.startsWith('### Outdated dependencies'));
            if (prev) {
              await github.rest.issues.updateComment({owner, repo, comment_id: prev.id, body: md});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number: number, body: md});
            }

  audit:
    name: Security Audit (non-blocking)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js 24.7.0 (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: 24.7.0
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies (npm ci)
        run: npm ci --no-audit --no-fund
      - name: Run npm audit (non-blocking)
        continue-on-error: true
        run: npm audit

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js 24.7.0 (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: 24.7.0
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies (npm ci)
        run: npm ci --no-audit --no-fund
      - name: Run unit tests
        run: npm test

  build:
    name: Build & Pages Artifact
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js 24.7.0 (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: 24.7.0
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies (npm ci)
        run: npm ci --no-audit --no-fund
      - name: Build production bundle
        run: npm run build
      - name: Upload Pages artifact
        uses: actions/upload-artifact@v4
        with:
          name: pages
          path: ./dist
